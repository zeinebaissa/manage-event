{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nexport class LoginComponent {\n  constructor(formBuilder, router) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    const usernameControl = this.loginForm.get('username');\n    const passwordControl = this.loginForm.get('password');\n    // Vérifier si les contrôles du formulaire sont définis\n    if (usernameControl && passwordControl) {\n      const username = usernameControl.value;\n      const password = passwordControl.value;\n      // Check if the username and password are correct\n      if (username === 'admin' && password === 'password') {\n        // Redirect to the home page (adjust the route as needed)\n        this.router.navigate(['/home']);\n      } else {\n        // Display an error message (you can customize this)\n        alert('Invalid username or password');\n      }\n    }\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 2,\n    vars: 0,\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"login works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","LoginComponent","constructor","formBuilder","router","loginForm","group","username","required","password","onSubmit","usernameControl","get","passwordControl","value","navigate","alert","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","_2","selectors","decls","vars","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\zeine\\Desktop\\DSI21S1\\ANGULAR\\projet angular\\frontend\\src\\app\\login\\login.component.ts","C:\\Users\\zeine\\Desktop\\DSI21S1\\ANGULAR\\projet angular\\frontend\\src\\app\\login\\login.component.html"],"sourcesContent":["// login.component.ts\n\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder, private router: Router) {\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n  onSubmit() {\n    const usernameControl = this.loginForm.get('username');\n  const passwordControl = this.loginForm.get('password');\n\n  // Vérifier si les contrôles du formulaire sont définis\n  if (usernameControl && passwordControl) {\n    const username = usernameControl.value;\n    const password = passwordControl.value;\n\n    // Check if the username and password are correct\n    if (username === 'admin' && password === 'password') {\n      // Redirect to the home page (adjust the route as needed)\n      this.router.navigate(['/home']);\n    } else {\n      // Display an error message (you can customize this)\n      alert('Invalid username or password');\n    }\n  }\n}\n}","<p>login works!</p>\n"],"mappings":"AAIA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;AAOnE,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAC1D,IAAI,CAACC,SAAS,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MACtCC,QAAQ,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACQ,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAET,UAAU,CAACQ,QAAQ;KACnC,CAAC;EACJ;EAEAE,QAAQA,CAAA;IACN,MAAMC,eAAe,GAAG,IAAI,CAACN,SAAS,CAACO,GAAG,CAAC,UAAU,CAAC;IACxD,MAAMC,eAAe,GAAG,IAAI,CAACR,SAAS,CAACO,GAAG,CAAC,UAAU,CAAC;IAEtD;IACA,IAAID,eAAe,IAAIE,eAAe,EAAE;MACtC,MAAMN,QAAQ,GAAGI,eAAe,CAACG,KAAK;MACtC,MAAML,QAAQ,GAAGI,eAAe,CAACC,KAAK;MAEtC;MACA,IAAIP,QAAQ,KAAK,OAAO,IAAIE,QAAQ,KAAK,UAAU,EAAE;QACnD;QACA,IAAI,CAACL,MAAM,CAACW,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;OAChC,MAAM;QACL;QACAC,KAAK,CAAC,8BAA8B,CAAC;;;EAG3C;EAAC,QAAAC,CAAA,G;qBA5BYhB,cAAc,EAAAiB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAdvB,cAAc;IAAAwB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCX3BZ,EAAA,CAAAc,cAAA,QAAG;QAAAd,EAAA,CAAAe,MAAA,mBAAY;QAAAf,EAAA,CAAAgB,YAAA,EAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}