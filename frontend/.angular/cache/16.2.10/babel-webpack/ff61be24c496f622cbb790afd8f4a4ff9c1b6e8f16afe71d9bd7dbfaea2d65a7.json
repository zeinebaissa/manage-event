{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nexport class LoginComponent {\n  constructor(formBuilder, router) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    const usernameControl = this.loginForm.get('username');\n    const passwordControl = this.loginForm.get('password');\n    // Vérifier si les contrôles du formulaire sont définis\n    if (usernameControl && passwordControl) {\n      const username = usernameControl.value;\n      const password = passwordControl.value;\n      // Check if the username and password are correct\n      if (username === 'admin' && password === '123456') {\n        // Redirect to the home page (adjust the route as needed)\n        this.router.navigate(['../homepage']);\n      } else {\n        // Display an error message (you can customize this)\n        alert('Invalid username or password');\n      }\n    }\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 12,\n    vars: 1,\n    consts: [[1, \"login-container\"], [3, \"formGroup\"], [\"for\", \"username\"], [\"type\", \"text\", \"id\", \"username\", \"formControlName\", \"username\", \"required\", \"\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", \"required\", \"\"], [\"type\", \"submit\", 3, \"click\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"form\", 1)(4, \"label\", 2);\n        i0.ɵɵtext(5, \"Username:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"input\", 3);\n        i0.ɵɵelementStart(7, \"label\", 4);\n        i0.ɵɵtext(8, \"Password:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 5);\n        i0.ɵɵelementStart(10, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_10_listener() {\n          return ctx.navigateToHomepage();\n        });\n        i0.ɵɵtext(11, \"Login\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      }\n    },\n    dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","LoginComponent","constructor","formBuilder","router","loginForm","group","username","required","password","onSubmit","usernameControl","get","passwordControl","value","navigate","alert","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","_2","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵlistener","LoginComponent_Template_button_click_10_listener","navigateToHomepage","ɵɵadvance","ɵɵproperty"],"sources":["C:\\Users\\zeine\\Desktop\\DSI21S1\\ANGULAR\\projet angular\\frontend\\src\\app\\login\\login.component.ts","C:\\Users\\zeine\\Desktop\\DSI21S1\\ANGULAR\\projet angular\\frontend\\src\\app\\login\\login.component.html"],"sourcesContent":["// login.component.ts\n\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder, private router: Router) {\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n  onSubmit() {\n    const usernameControl = this.loginForm.get('username');\n  const passwordControl = this.loginForm.get('password');\n\n  // Vérifier si les contrôles du formulaire sont définis\n  if (usernameControl && passwordControl) {\n    const username = usernameControl.value;\n    const password = passwordControl.value;\n\n    // Check if the username and password are correct\n    if (username === 'admin' && password === '123456') {\n      // Redirect to the home page (adjust the route as needed)\n      this.router.navigate(['../homepage']);\n    } else {\n      // Display an error message (you can customize this)\n      alert('Invalid username or password');\n    }\n  }\n}\n}","<!-- login.component.html -->\n\n<div class=\"login-container\">\n    <h2>Login</h2>\n    <form [formGroup]=\"loginForm\" >\n      <label for=\"username\">Username:</label>\n      <input type=\"text\" id=\"username\" formControlName=\"username\" required>\n  \n      <label for=\"password\">Password:</label>\n      <input type=\"password\" id=\"password\" formControlName=\"password\" required>\n  \n      <button type=\"submit\" (click)= \"navigateToHomepage()\" >Login</button>\n    </form>\n</div>  "],"mappings":"AAIA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;AAOnE,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAC1D,IAAI,CAACC,SAAS,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MACtCC,QAAQ,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACQ,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAET,UAAU,CAACQ,QAAQ;KACnC,CAAC;EACJ;EAEAE,QAAQA,CAAA;IACN,MAAMC,eAAe,GAAG,IAAI,CAACN,SAAS,CAACO,GAAG,CAAC,UAAU,CAAC;IACxD,MAAMC,eAAe,GAAG,IAAI,CAACR,SAAS,CAACO,GAAG,CAAC,UAAU,CAAC;IAEtD;IACA,IAAID,eAAe,IAAIE,eAAe,EAAE;MACtC,MAAMN,QAAQ,GAAGI,eAAe,CAACG,KAAK;MACtC,MAAML,QAAQ,GAAGI,eAAe,CAACC,KAAK;MAEtC;MACA,IAAIP,QAAQ,KAAK,OAAO,IAAIE,QAAQ,KAAK,QAAQ,EAAE;QACjD;QACA,IAAI,CAACL,MAAM,CAACW,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;OACtC,MAAM;QACL;QACAC,KAAK,CAAC,8BAA8B,CAAC;;;EAG3C;EAAC,QAAAC,CAAA,G;qBA5BYhB,cAAc,EAAAiB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAdvB,cAAc;IAAAwB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCT3Bb,EAAA,CAAAe,cAAA,aAA6B;QACrBf,EAAA,CAAAgB,MAAA,YAAK;QAAAhB,EAAA,CAAAiB,YAAA,EAAK;QACdjB,EAAA,CAAAe,cAAA,cAA+B;QACPf,EAAA,CAAAgB,MAAA,gBAAS;QAAAhB,EAAA,CAAAiB,YAAA,EAAQ;QACvCjB,EAAA,CAAAkB,SAAA,eAAqE;QAErElB,EAAA,CAAAe,cAAA,eAAsB;QAAAf,EAAA,CAAAgB,MAAA,gBAAS;QAAAhB,EAAA,CAAAiB,YAAA,EAAQ;QACvCjB,EAAA,CAAAkB,SAAA,eAAyE;QAEzElB,EAAA,CAAAe,cAAA,iBAAuD;QAAjCf,EAAA,CAAAmB,UAAA,mBAAAC,iDAAA;UAAA,OAAUN,GAAA,CAAAO,kBAAA,EAAoB;QAAA,EAAC;QAAErB,EAAA,CAAAgB,MAAA,aAAK;QAAAhB,EAAA,CAAAiB,YAAA,EAAS;;;QAPjEjB,EAAA,CAAAsB,SAAA,GAAuB;QAAvBtB,EAAA,CAAAuB,UAAA,cAAAT,GAAA,CAAA3B,SAAA,CAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}