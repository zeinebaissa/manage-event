{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormControl } from '@angular/forms';\nimport { Validators } from '@angular/forms';\nexport let CreateComponent = class CreateComponent {\n  constructor(service, router) {\n    this.service = service;\n    this.router = router;\n    this.userForm = new FormGroup({\n      'fullname': new FormControl('', Validators.required),\n      'email': new FormControl('', Validators.required),\n      'mobile': new FormControl('', Validators.required)\n    });\n  }\n  ngOnInit() {\n    console.log(this.router.snapshot.paramMap.get('id'), 'getid');\n    this.getparmid = this.router.snapshot.paramMap.get('id');\n    this.service.getSingleData(this.getparmid).subscribe(res => {\n      console.log(res, \"res==>\");\n      this.userForm.patchValue({\n        fullname: res.data[0].fullname,\n        email: res.data[0].email,\n        mobile: res.data[0].mobile\n      });\n    });\n  }\n  userUpdate() {\n    if (this.userForm.valid) {\n      console.log(this.userForm.value);\n      this.service.updateData(this.userForm.value, this.getparmid).subscribe(res => {\n        console.log(res, \"resupdated==>\");\n        this.userForm.reset();\n        this.successmsg = res.message;\n      });\n    }\n  }\n  //create new user\n  userSubmit() {\n    if (this.userForm.valid) {\n      console.log(this.userForm.value);\n      this.service.createData(this.userForm.value).subscribe(res => {\n        console.log(res, \"res==>\");\n        this.userForm.reset();\n        this.successmsg = res.message;\n      });\n    } else {\n      this.errormsg = \"all field is required!\";\n    }\n  }\n};\nCreateComponent = __decorate([Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.css']\n})], CreateComponent);","map":{"version":3,"names":["Component","FormGroup","FormControl","Validators","CreateComponent","constructor","service","router","userForm","required","ngOnInit","console","log","snapshot","paramMap","get","getparmid","getSingleData","subscribe","res","patchValue","fullname","data","email","mobile","userUpdate","valid","value","updateData","reset","successmsg","message","userSubmit","createData","errormsg","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\zeine\\Desktop\\projet angular\\frontend\\src\\app\\create\\create.component.ts"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\nimport {FormGroup} from '@angular/forms';\nimport {FormControl} from '@angular/forms';\nimport {Validators} from '@angular/forms';\nimport{ApiserviceService} from '../apiservice.service';\nimport{ActivatedRoute} from '@angular/router';\n\n@Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.css']\n})\nexport class CreateComponent implements OnInit{\n  constructor(private service:ApiserviceService,private router:ActivatedRoute) { }\n\n\n  errormsg:any;\n  successmsg:any;\n  getparmid:any;\n\n  ngOnInit(): void {\n    console.log(this.router.snapshot.paramMap.get('id'),'getid');\n    this.getparmid=this.router.snapshot.paramMap.get('id');\n    this.service.getSingleData(this.getparmid).subscribe((res) =>{\n      console.log(res,\"res==>\");\n      this.userForm.patchValue({\n        fullname:res.data[0].fullname,\n        email:res.data[0].email,\n        mobile:res.data[0].mobile\n      })\n    })\n  }\n\n\n\n  userForm= new FormGroup({\n    'fullname': new FormControl('',Validators.required),\n    'email': new FormControl('',Validators.required),\n    'mobile': new FormControl('',Validators.required)\n  })\n\n  userUpdate(){\n    if(this.userForm.valid){\n      console.log(this.userForm.value);\n      this.service.updateData(this.userForm.value,this.getparmid).subscribe((res) =>{\n        console.log(res,\"resupdated==>\");\n        this.userForm.reset();\n        this.successmsg=res.message;\n      });\n    }\n\n\n  }\n\n  //create new user\n  userSubmit(){\n    if(this.userForm.valid){\n      console.log(this.userForm.value);\n      this.service.createData(this.userForm.value).subscribe((res) =>{\n        console.log(res,\"res==>\");\n        this.userForm.reset();\n        this.successmsg=res.message;\n      });\n    }\n    else{\n      this.errormsg=\"all field is required!\";\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}