{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nexport class AppComponent {\n  constructor(formBuilder, router) {\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  onSubmit() {\n    const usernameControl = this.loginForm.get('username');\n    const passwordControl = this.loginForm.get('password');\n    // Vérifier si les contrôles du formulaire sont définis\n    if (usernameControl && passwordControl) {\n      const username = usernameControl.value;\n      const password = passwordControl.value;\n      // Check if the username and password are correct\n      if (username === 'admin' && password === 'password') {\n        // Redirect to the home page (adjust the route as needed)\n        this.router.navigate(['./homepage']);\n      } else {\n        // Display an error message (you can customize this)\n        alert('Invalid username or password');\n      }\n    }\n  }\n  static #_ = this.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 17,\n    vars: 0,\n    consts: [[1, \"container\", \"mt-5\"], [\"routerLink\", \"create\", 1, \"btn\", \"btn-success\"], [\"routerLink\", \"read\", 1, \"btn\", \"btn-primary\"], [\"routerLink\", \"create-event\", 1, \"btn\", \"btn-success\"], [\"routerLink\", \"read-event\", 1, \"btn\", \"btn-primary\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2, \"Member Mangement\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"a\", 1);\n        i0.ɵɵtext(4, \"Create\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(5, \" \\u00A0 \");\n        i0.ɵɵelementStart(6, \"a\", 2);\n        i0.ɵɵtext(7, \"Read\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"router-outlet\");\n        i0.ɵɵelementStart(9, \"h1\");\n        i0.ɵɵtext(10, \"Event Mangement\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"a\", 3);\n        i0.ɵɵtext(12, \"Create\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(13, \" \\u00A0 \");\n        i0.ɵɵelementStart(14, \"a\", 4);\n        i0.ɵɵtext(15, \"Read\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"router-outlet\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    dependencies: [i2.RouterOutlet, i2.RouterLink],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Validators","AppComponent","constructor","formBuilder","router","loginForm","group","username","required","password","onSubmit","usernameControl","get","passwordControl","value","navigate","alert","_","i0","ɵɵdirectiveInject","i1","FormBuilder","i2","Router","_2","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement"],"sources":["C:\\Users\\zeine\\Desktop\\DSI21S1\\ANGULAR\\projet angular\\frontend\\src\\app\\app.component.ts","C:\\Users\\zeine\\Desktop\\DSI21S1\\ANGULAR\\projet angular\\frontend\\src\\app\\app.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  loginForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder, private router: Router) {\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n  onSubmit() {\n    const usernameControl = this.loginForm.get('username');\n  const passwordControl = this.loginForm.get('password');\n\n  // Vérifier si les contrôles du formulaire sont définis\n  if (usernameControl && passwordControl) {\n    const username = usernameControl.value;\n    const password = passwordControl.value;\n\n    // Check if the username and password are correct\n    if (username === 'admin' && password === 'password') {\n      // Redirect to the home page (adjust the route as needed)\n      this.router.navigate(['./homepage']);\n    } else {\n      // Display an error message (you can customize this)\n      alert('Invalid username or password');\n    }\n  }\n}\n}","<div class=\"container mt-5\">\n  <h1>Member Mangement</h1>\n  <a routerLink=\"create\" class=\"btn btn-success\">Create</a>\n  &nbsp;\n  <a routerLink=\"read\" class=\"btn btn-primary\">Read</a>\n  <router-outlet></router-outlet>\n  <h1>Event Mangement</h1>\n  <a routerLink=\"create-event\" class=\"btn btn-success\">Create</a>\n  &nbsp;\n  <a routerLink=\"read-event\" class=\"btn btn-primary\">Read</a>\n  <router-outlet></router-outlet>\n</div>\n\n"],"mappings":"AAEA,SAAiCA,UAAU,QAAQ,gBAAgB;;;;AAMnE,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAC1D,IAAI,CAACC,SAAS,GAAG,IAAI,CAACF,WAAW,CAACG,KAAK,CAAC;MACtCC,QAAQ,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACQ,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAET,UAAU,CAACQ,QAAQ;KACnC,CAAC;EACJ;EAEAE,QAAQA,CAAA;IACN,MAAMC,eAAe,GAAG,IAAI,CAACN,SAAS,CAACO,GAAG,CAAC,UAAU,CAAC;IACxD,MAAMC,eAAe,GAAG,IAAI,CAACR,SAAS,CAACO,GAAG,CAAC,UAAU,CAAC;IAEtD;IACA,IAAID,eAAe,IAAIE,eAAe,EAAE;MACtC,MAAMN,QAAQ,GAAGI,eAAe,CAACG,KAAK;MACtC,MAAML,QAAQ,GAAGI,eAAe,CAACC,KAAK;MAEtC;MACA,IAAIP,QAAQ,KAAK,OAAO,IAAIE,QAAQ,KAAK,UAAU,EAAE;QACnD;QACA,IAAI,CAACL,MAAM,CAACW,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;OACrC,MAAM;QACL;QACAC,KAAK,CAAC,8BAA8B,CAAC;;;EAG3C;EAAC,QAAAC,CAAA,G;qBA5BYhB,YAAY,EAAAiB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAZvB,YAAY;IAAAwB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCRzBb,EAAA,CAAAe,cAAA,aAA4B;QACtBf,EAAA,CAAAgB,MAAA,uBAAgB;QAAAhB,EAAA,CAAAiB,YAAA,EAAK;QACzBjB,EAAA,CAAAe,cAAA,WAA+C;QAAAf,EAAA,CAAAgB,MAAA,aAAM;QAAAhB,EAAA,CAAAiB,YAAA,EAAI;QACzDjB,EAAA,CAAAgB,MAAA,eACA;QAAAhB,EAAA,CAAAe,cAAA,WAA6C;QAAAf,EAAA,CAAAgB,MAAA,WAAI;QAAAhB,EAAA,CAAAiB,YAAA,EAAI;QACrDjB,EAAA,CAAAkB,SAAA,oBAA+B;QAC/BlB,EAAA,CAAAe,cAAA,SAAI;QAAAf,EAAA,CAAAgB,MAAA,uBAAe;QAAAhB,EAAA,CAAAiB,YAAA,EAAK;QACxBjB,EAAA,CAAAe,cAAA,YAAqD;QAAAf,EAAA,CAAAgB,MAAA,cAAM;QAAAhB,EAAA,CAAAiB,YAAA,EAAI;QAC/DjB,EAAA,CAAAgB,MAAA,gBACA;QAAAhB,EAAA,CAAAe,cAAA,YAAmD;QAAAf,EAAA,CAAAgB,MAAA,YAAI;QAAAhB,EAAA,CAAAiB,YAAA,EAAI;QAC3DjB,EAAA,CAAAkB,SAAA,qBAA+B;QACjClB,EAAA,CAAAiB,YAAA,EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}